from aiogram import Router, Bot, F
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from data.database import *
from notion_client import Client
import dateparser
from openai import AsyncOpenAI
import datetime
from dateutil import tz
import os

router = Router()

client_GPT = AsyncOpenAI(api_key=os.getenv('GPT_API'))
notion = Client(auth=os.getenv('NOTION_API'))
NOTION_DATABASE_ID = os.getenv('NOTION_DB_ID')
time_zone = os.getenv('TIME_ZONE')
tz = tz.gettz(time_zone)


@router.message()
async def simple(message: Message, bot: Bot):
    text = message.text
    if text is not None:
        #–ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–æ –º–∏—Ç –∏–ª–∏ –∑—É–º –≤ —Ç–µ–∫—Å—Ç–µ
        if text[0] == '!' or 'meet.google.com' in text or 'zoom.us' in text or 'tel.meet' in text:
            if text[0] == '!':
                await message.delete()
                if len(text) < 2:
                    text = None
                else:
                    text = text[1:]

            comments = ''
            if text:
                comments += f'üåö {text}'

            properties = {}
            if message.reply_to_message is not None:
                comments += f'\nüåù {message.reply_to_message.html_text}'
                properties["–ö–ª–∏–µ–Ω—Ç"] = {"rich_text": [{"text": {"content": f'{message.reply_to_message.from_user.full_name} ({message.reply_to_message.from_user.id})'}}]}

            messages = [
                {
                    "role": "system",
                    "content": '''–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç –≤ json —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –ª–µ–≥–∫–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º.
                    üåù - —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, üåö - –º–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ
                    –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ —É–∫–∞–∑–∞–Ω (–ø—É—Å—Ç–æ–π) –ù–ï –ù–£–ñ–ù–û –ï–ì–û –î–û–ë–ê–í–õ–Ø–¢–¨ –í JSON
                    –°–µ–π—á–∞—Å: 26.03.2024 04:19
                    
                    –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –ó–∞–¥–∞—á–∞, –î–∞—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç %d.%m.%Y %H:%M), –ú–µ—Å—Ç–æ, –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏, URL
                    –ü–ê–†–ê–ú–ï–¢–† –ó–ê–î–ê–ß–ê –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ü–£–°–¢–´–ú. –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞ - –∑–Ω–∞—á–∏—Ç –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ —Å–æ–∑–≤–æ–Ω (—Å—Å—ã–ª–∫—É –ø–æ–º–µ—Å—Ç–∏ –≤ —Å—Å—ã–ª–∫—É, –∞ –≤ –∑–∞–¥–∞—á–µ –Ω–∞–ø–∏—à–∏ "—Å–æ–∑–≤–æ–Ω")       
                    ""
                    '''
                },
                {
                    "role": "user",
                    "content": 'üåù –ú–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω –∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∑–∞ 100 –¥–æ–ª–ª–∞—Ä–æ–≤, üåö—á–µ—Ä–µ–∑ –¥–µ–Ω—å'}
                ,
                {
                    "role": "assistant",
                    "content": '''
                    {
                        "–ó–∞–¥–∞—á–∞": "–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ",
                        "–î–∞—Ç–∞": "27.03.2024 04:19",
                        "–ú–µ—Å—Ç–æ": "–º–∞–≥–∞–∑–∏–Ω"
                        "–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏": 100
                    }
                    '''
                },
                {
                    "role": "user",
                    "content": f'{comments}\n –°–µ–π—á–∞—Å: {datetime.datetime.now(tz).strftime("%d.%m.%Y %H:%M")}, –µ—Å–ª–∏ –≤ –∑–∞–¥–∞—á–µ –Ω–µ –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è, —Ç–æ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –∏—Å–ø–æ–ª—å–∑—É–π —á–µ—Ä–µ–∑ 1 —á–∞—Å'
                },
            ]

            chat_completion = await client_GPT.chat.completions.create(
                messages=messages,
                model="gpt-3.5-turbo-0125",
            )

            result = chat_completion.choices[0].message.content
            print(result)
            gpt_data = json.loads(result)


            if gpt_data.get('–î–∞—Ç–∞') is not None:
                date = dateparser.parse(gpt_data.get('–î–∞—Ç–∞'))
                if date is not None:
                    #—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ
                    properties["–î–∞—Ç–∞"] = {"date": {"start": date.strftime('%Y-%m-%d %H:%M'), "time_zone": time_zone}}

            if gpt_data.get('–ó–∞–¥–∞—á–∞') is not None:
                properties["title"] = {"title": [{"text": {"content": gpt_data.get('–ó–∞–¥–∞—á–∞')}}]}

            if gpt_data.get('–ú–µ—Å—Ç–æ') is not None:
                properties["–ú–µ—Å—Ç–æ"] = {"rich_text": [{"text": {"content": gpt_data.get('–ú–µ—Å—Ç–æ')}}]}

            if gpt_data.get('–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏') is not None:
                properties["–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏"] = {"number": gpt_data.get('–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏')}

            if gpt_data.get('URL') is not None:
                properties["URL"] = {"url": gpt_data.get('URL')}

            if message.chat.title:
                properties["–ß–∞—Ç"] = {"rich_text": [{"text": {"content": f'{message.chat.title}'}}]}

            properties["–ê–≤—Ç–æ—Ä"] = {"rich_text": [{"text": {"content": f'{message.from_user.full_name}'}}]}

            properties["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"] = {"rich_text": [{"text": {"content": comments}}]}

            page = notion.pages.create(
                parent={"database_id": NOTION_DATABASE_ID},
                properties=properties
            )
            reply_markup = InlineKeyboardBuilder()
            reply_markup.button(text='‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data=f'del')
            if message.reply_to_message is not None:
                tetext = f'@{message.from_user.username} –ø—Ä–∏–Ω—è–ª –∑–∞–¥–∞—á—É –æ—Ç @{message.reply_to_message.from_user.username}'
                if text:
                    tetext += f', –æ—Ç–≤–µ—Ç–∏–≤:\n"<i>{text}</i>"'
            else:
                tetext = f'@{message.from_user.username} –ø–æ—Å—Ç–∞–≤–∏–ª –∑–∞–¥–∞—á—É <b>{gpt_data.get("–ó–∞–¥–∞—á–∞")}</b>'
            if message.reply_to_message is not None:
                await message.answer(tetext, reply_to_message_id=message.reply_to_message.message_id)
            else:
                await message.answer(tetext)



@router.callback_query(F.data == 'del')
async def del_task(call: CallbackQuery):
    await call.message.delete()


